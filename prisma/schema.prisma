generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  verified       Boolean         @default(false)
  likesPost      Likes[]
  post           Post[]
  accounts       Account[]
  sessions       Session[]
  comments       Comments[]
  userSettings   UserSettings[]
  commentsReplay CommentsReply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String          @id @default(cuid())
  title         String
  description   String?         @db.LongText
  category      String
  file          Json
  comments      Comments[]
  likes         Int?            @default(0)
  views         Int?            @default(0)
  authorId      String
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  published     Boolean
  likesBy       Likes[]
  createdAt     DateTime?
  updatedAt     DateTime?
  CommentsReply CommentsReply[]
}

model Likes {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime?
  updatedAt DateTime?
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
  id        String          @id @default(cuid())
  text      String          @db.LongText
  reply     CommentsReply[]
  authorId  String
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime?
  updatedAt DateTime?

  @@map("comments")
}

model CommentsReply {
  id          String    @id @default(cuid())
  text        String    @db.LongText
  authorId    String
  authorName  String
  authorImage String
  author      User      @relation(fields: [authorId, authorName, authorImage], references: [id, name, image], onDelete: Cascade)
  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId   String
  comment     Comments  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt   DateTime?
  updatedAt   DateTime?

  @@map("comments_replay")
}

model UserSettings {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  updatedAt DateTime
  image     String?
  banner    String?
  bio       String?
  nickname  String?
}
