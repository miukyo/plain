// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  post          Post[]
  accounts      Account[]
  sessions      Session[]
  comments      Comments[]
  userSettings  UserSettings[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String
  file        Json
  comments    Comments[]
  likes       Int?       @default(0)
  views       Int?       @default(0)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  published   Boolean
  createdAt   DateTime?
  updatedAt   DateTime?
}

model Comments {
  id        String   @id @default(cuid())
  text      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime
}

model UserSettings {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  updatedAt DateTime
  image     String?
  banner    String?
  bio       String?
  nickname  String?
}
